package Redismq::RedisScript::PopSS;

use strict;
use warnings;

use Moo;
extends 'Redismq::RedisScript';

has '+code'
  => (
      is => 'ro',
      default => <<EOCB,
local zset = KEYS[1]
local zset_assigned = KEYS[2]
local now = ARGV[1]
local pop_timeout = ARGV[2]
local message_timeout = ARGV[3]
local message_timedout = redis.call('zrangebyscore', zset_assigned, 0, now,'limit',0,1)
if message_timedout ~= false and #message_timedout ~= 0 then
  print("message timeout, move " .. #message_timedout .." messages after timeout " .. message_timedout[1])
  redis.call('zrem',zset_assigned, message_timedout[1])
  redis.call('zadd',zset_assigned,now, message_timedout[1])
  redis.call('incr',message_timedout[1].."_retries_count")
  redis.call('expire', message_timedout[1].."_retries_count", message_timeout)
end
local message = redis.call('zrangebyscore', zset, 0,now,'limit',0,1)
if message ~= false and #message ~= 0 then
  redis.call('zrem',zset,message[1])
  redis.call('zadd',zset_assigned,pop_timeout,message[1])
  print( zset_assigned.." with a new member ".. message[1] .." will timeout at "..pop_timeout )
  return message[1]
end
return
EOCB
     );

1;

=head1 NAME

Redismq::RedisScript::PopSS - Pop action from the queue maintaining a strict sequence policy

=head1 ARGS

=head2 zset name

name of the main queue

=head2 zset_assigned

name of the queue for the assigned messages

=head2 now

current time (unix time stamp).

=head2 pop_timeout

time out for the interval between pop and done actions in sec.

=head2 message_timeout

the message time out in sec.

=head1 AUTHOR

pedro.frazao

=cut
